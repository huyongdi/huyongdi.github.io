[{"title":"滚动条滚到到特定位置","date":"2017-04-17T01:01:05.000Z","path":"2017/04/17/滚动条滚到到特定位置/","text":"1.锚点2. 改变scrollTop1234//有时候会被影响并不能滚动 $('html, body').animate(&#123; scrollTop: $(\"#id\").offset().top&#125;, 2000); 3.直接改变hash1window.location.hash = \"#id\" 4.scrollIntoView让元素出现在顶部1document.getElementById('tool').scrollIntoView(true);","tags":[]},{"title":"记录几个问题","date":"2017-04-01T08:56:14.000Z","path":"2017/04/01/记录几个问题/","text":"最近真是忙的要死，一不小心就晚上十二点了，记录一些东西吧，免得忘了 1. 数组值是对象，根据对象的某个属性进行排序12345678function compare (property) &#123; return function (a, b) &#123; var value1 = a[property]; var value2 = b[property]; return value1 - value2; &#125; &#125;,arr.sort(compare('id')); //排序 2.关于IE的几点1.浏览器判断1234567891011121314151617181920212223242526272829303132333435HTML写法:&lt;!--[if !IE]&gt;&lt;!--&gt; 不是ie&lt;script src=\"js/product.js?version=20170401\"&gt;&lt;/script&gt;&lt;!--&lt;![endif]--&gt;&lt;!--[if gte IE 9]&gt; 9以及9以上的ie&lt;script src=\"js/product.js?version=20170401\"&gt;&lt;/script&gt;&lt;![endif]--&gt;&lt;!--[if lt IE 9]&gt; 9以下的ie&lt;script src=\"js/product-ie8.js?version=20170401\"&gt;&lt;/script&gt;&lt;![endif]--&gt;JS判断： var explorer = window.navigator.userAgent; //ie if (explorer.indexOf(\"MSIE\") &gt;= 0) &#123; //从explore中拿IE的版本号 var MISE_str = explorer.split(';')[1]; MISE_str = MISE_str.substring( MISE_str.indexOf('MISE')+6,MISE_str.length); var MISE_number = parseFloat(MISE_str); if(MISE_number &lt;= 9.0)&#123; window.location.href = '../404/404.html' &#125; &#125; //firefox else if (explorer.indexOf(\"Firefox\") &gt;= 0) &#123; &#125; //Chrome else if (explorer.indexOf(\"Chrome\") &gt;= 0) &#123; &#125; // Opera else if (explorer.indexOf(\"Opera\") &gt;= 0) &#123; &#125; //Safari else if (explorer.indexOf(\"Safari\") &gt;= 0) &#123; &#125; 2.加头部123&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/&gt; 默认IE最高版本 有谷歌插件的时候用插件(谷歌内嵌浏览器框架GCF)&lt;link href=\"img/grandomics.ico\" type=\"image/x-icon\" rel=icon&gt; 3.图片质量必须高，不然显示不出来（比如QQ截图就基本上不行）4.AJAX跨域请求，需加 jQuery.support.cors = true;5.阻止冒泡12345678stopEventBubble: function (event) &#123; var e = event || window.event; if (e &amp;&amp; e.stopPropagation) &#123; e.stopPropagation(); &#125; else &#123; e.cancelBubble = true; &#125; &#125;, 6.阻止默认事件（比如表单刷新）123456789stopBase: function (event) &#123; var e = event || window.event; if (e &amp;&amp; e.preventDefault) &#123; e.preventDefault(); &#125; else &#123; window.event.returnValue = false; &#125; return false; &#125;, 7.键盘事件绑定123456$(\"#queryInput\").bind('keydown', function (e) &#123; var key = e.which; if (key === 13) &#123; e.preventDefault(); //不能少 &#125;&#125;); 8.pushState不能用 location.hash代替","tags":[]},{"title":"AJAX几点问题","date":"2017-03-27T04:18:55.000Z","path":"2017/03/27/ajax几点问题/","text":"Form表单上传文件1234567891011121314151617const formDara = new FormData($(\"#uploadForm\")[0]); $.ajax(&#123; type: 'POST', url: '', data: formDara, cache: false, processData: false, contentType: false, beforeSend: function (xhr) &#123; // xhr.setRequestHeader(\"Authorization\", 'Token ' + window.localStorage.getItem('nextToken')); // xhr.setRequestHeader(\"Content-Type\", \" multipart/form-data; boundary=----------------------------4ebf00fbcf09\"); // xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\"); &#125;, success: function () &#123; alert(\"批量添加成功\") &#125; &#125;);","tags":[]},{"title":"Vue.js的几点细节","date":"2017-03-16T07:27:00.000Z","path":"2017/03/16/Vue.js的几点细节/","text":"记录几个细节问题 1.在vue实例里面获得input的值HTML:1234&lt;div class=\"searchBorder\" id=\"search_gene\"&gt; &lt;input type=\"text\" class=\"form-control\" @keyup.enter=\"onEnter\" ref=\"searchInput\"&gt; &lt;!--ref值--&gt; &lt;button class=\"search-btn myBtn\" @click=\"onEnter\"&gt;&lt;/button&gt;&lt;/div&gt; JS:1234567891011new Vue(&#123; el: '#search_gene', data: &#123; searchInput: null &#125;, methods: &#123; onEnter: function () &#123; var value =this.$refs.searchInput.value; //取得实例对应ref的值 &#125; &#125; &#125;); 2。html模板里面遍历数组时，利用上index1:id=\"'abc'+index\" //动态绑定ID 3.不要修改后台原值，应该尽量使用过滤器filtersHTML:1234&lt;!-- in mustaches --&gt;&#123;&#123; message | capitalize &#125;&#125;&lt;!-- in v-bind --&gt;&lt;div v-bind:id=\"rawId | formatId\"&gt;&lt;/div&gt; JS:12345678910new Vue(&#123; // ... filters: &#123; capitalize: function (value) &#123; if (!value) return '' value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) &#125; &#125;&#125;)","tags":[]},{"title":"vue实现简单的分页功能","date":"2017-03-08T06:56:38.000Z","path":"2017/03/08/vue实现简单的分页功能/","text":"在vue的基础上实现简单的分页逻辑，记录一下. html文件:12345678910111213141516&lt;div id=\"app\" class=\"text-center\" v-show=\"!!allPage\"&gt; &lt;nav&gt; &lt;ul class=\"pagination\"&gt; &lt;!--上一页逻辑--&gt; &lt;li v-if='current == 1' class='disabled'&gt;&lt;span class='color-a'&gt;&amp;laquo;上一页&lt;/span&gt;&lt;/li&gt; &lt;li v-else @click='current-- &amp;&amp; goTo(current--)'&gt;&lt;span class='color-a'&gt;&amp;laquo;上一页&lt;/span&gt;&lt;/li&gt; &lt;!--中间页码--&gt; &lt;li v-for=\"index in pages\" @click=\"goTo(index)\" :class=\"&#123;'active':current == index&#125;\"&gt;&lt;span class=\"color-a\"&gt;&#123;&#123;index&#125;&#125;&lt;/span&gt;&lt;/li&gt; &lt;!--下一页逻辑--&gt; &lt;li v-if=\"allPage == current || allPage == 0\" class=\"disabled\"&gt;&lt;span class=\"color-a\"&gt;下一页&amp;raquo;&lt;/span&gt;&lt;/li&gt; &lt;li @click=\"current++ &amp;&amp; goTo(current++)\" :class=\"&#123;'disabled':allPage == current || allPage == 0&#125;\"&gt;&lt;span class=\"color-a\"&gt;下一页&amp;raquo;&lt;/span&gt;&lt;/li&gt; &lt;!--跳转逻辑--&gt; &lt;li class=\"\"&gt;&lt;span class=\"color-a toPage\"&gt;第&lt;input v-model=\"current\" @keyup.enter=\"goTo(current)\"&gt;页/共&#123;&#123;allPage&#125;&#125;页&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;&lt;/div&gt; js文件：计算属性和goTo函数第一行必须，其余的可以根据实际情况调整12345678910111213141516171819202122232425262728293031323334353637383940414243444546var vuePage = new Vue(&#123; el: '#app', data: &#123; current: 1, showItem: 10, /*翻页按钮中间页数显示10个*/ allPage: Math.ceil(COUNT / 20), /*每页显示20条数据*/ url: '' &#125;, computed: &#123; pages: function () &#123; //计算属性 计算出中间应该是哪些值，比如1-10 3-12 var pag = [], i = null; if (this.current &lt; this.showItem) &#123; i = Math.min(this.showItem, this.allPage); while (i) &#123; pag.unshift(i--); //把一个元素添加到数组的开头 &#125; &#125; else &#123; var middle = this.current - this.showItem / 2;//从哪里开始 i = this.showItem; if (middle &gt; (this.allPage - this.showItem)) &#123; middle = (this.allPage - this.showItem) + 1 &#125; while (i--) &#123; pag.push(middle++); &#125; &#125; return pag &#125; &#125;, methods: &#123; goTo: function (index) &#123; this.current = index; //处理得到新的url，然后调用另一个vue模块 var datafile = common.getStrParam(this.url, 'datafile') var questionMark = this.url.indexOf(\"?\"); var str = this.url.substring(0, questionMark); var url = str + \"?datafile=\" + datafile + '&amp;page=' + index; vueTable.get(url); &#125;, resetData: function (obj) &#123; 请求到数据之后调用reset方法，初始化分页 this.allPage = Math.ceil(obj.count / 20); this.url = obj.nextUrl; &#125; &#125; &#125;);","tags":[]},{"title":"随便聊几句","date":"2017-03-03T06:02:47.000Z","path":"2017/03/03/来随便聊聊/","text":"大学同学搞了个微信公众号，想记录一下我们最近几年写的东西，然后不知道过多少年再寄给我们。内容全部由一些小伙伴操刀，这次轮到我了.想着作为程序员在txt或者word上面写太low了，打开编辑器，就顺便写在我的网站上面吧. ——分割线—— 忙了一上午，饭都比平时晚半个小时去吃，趴了一会，嗯，虽然没睡着，但是可以来BB两句了.首先，去TMD的，今天离站台还有10米，公交车又开走了，没错是又，昨天也错过了，我下个电梯的时间，公交车居然开了三站路… 万万没想到啊，武汉的公交车居然能跑这么快，这是我搬过来快四个月，唯一两次错过(这样说好像有什么不对劲，又好像没什么不妥).那么问题来了，我迟到了没有呢？然而并没有，8.30上班，8.26就按了我的大拇指打卡，中途还花时间买了一个饼一杯豆浆，话说，园区食堂的豆浆真是黑啊，2块钱一杯，excuse me? 哎呦，说什么好呢，真人的公众号有妹子关注吧？那么打一波广告不过分吧？小妹妹，有么有男朋友啊？没有的话，介不介意有一个啊？有的话，换一个怎么样啊？如果你不想换，那么多一个怎么样啊？考虑考虑呗.算了，不扯了，来聊一聊毕业之后吧. 15年毕业，那时候在深圳滚了几个月，然后发现MD不行，这种lowB测试没啥前途(嗯，没有歧视，是我做的活太low，看不到未来)，就回来了，开始在武汉搞前端，然后一做就是十几个月.以前老是听别人说大学毕业这没做后悔，那没做会后悔。结果现在都一年多了，完全没有感觉有什么东西需要去后悔.当过几年学渣，做过几天学霸，早上因为起不来没上过课，也因为要考试，连续几天五点半起床复习.那时候还是贴吧新手啊，人也是羞涩的不要不要的，但是也认识了不少有意思的人，收获了不少.现在上了年纪，虽然贴吧没怎么玩了，但是俨然成了一个老司机，说完这句话，脑海里浮出一个图，不得不让你们看看了，没时间解释了，快上车. 这好像是我今年第一次写随笔吧，以前还在上学的时候，隔段时间就提笔在QQ空间里面写个日记,虽然到后来间隔越来越长.现在小伙伴好像大部分都转战微信了，我倒是2个都还在用，毕竟上班需要登QQ.现在的生活，不紧不慢，努力提高技术能力的同时，休息会打打游戏，嗯，还是DOTA2，不是你们年轻人的王者，也不是阴阳师.好吧，其实是手机耗电太快，不想玩，等我换手机看情况说不定会玩吧.有时候我也会想，自己想要的生活到底是什么，并不能想的很清楚，但是我明白我要什么，不要什么，就像你们常说的要优雅，不要污(虽然事实并不一定这样)，但是这也算个选择吧，我觉得. 感觉我这个人很随性也随意，不过我还不老，24岁有任性的资本.也许我会在武汉一直干下去？也许我会去深圳待几年，真正的体验和融入大环境、新技术？甚至也许会为了一个突然的理由去一个城市？这些都说不准有时候在想，读书和不读思维方式真的差很多，那么我宅在这里，和那些见多识广的人，思想是不是也隔着呢？也许我应该花时间出去走走，去新疆看看、西藏待待？去上海/深圳体验几年工作？也许甚至该出国看看新世界？大学的时候和朋友去山里转过，也徒步好几天，靠着树睡过，河边静坐过一整天，那时候能明显感觉到~嗯，我活的好好的.当然也不是说现在不好，我一直是一个热爱生活的人，不对，高中不全是，有一段黑暗的历史(想听八卦吗？不好意思没有). 看过很多动漫/电影/电视剧，认识了很多男人/女人/不是人，但是任何东西的记忆总是不够清晰，不喜欢去装和想太多东西.明天又迎来了双休，想看个电影，生化危机6，不管它好不好看，看了1-5的我想要个结局. 好像名字是叫终章吧. 然而我要的终章在哪里？","tags":[]},{"title":"让ES6在浏览器内运行","date":"2017-03-01T06:32:16.000Z","path":"2017/03/01/让ES6在浏览器内运行/","text":"用ES6编写程序，浏览器不一定支持，这个时候就需要将ES6转化为ES5 浏览器环境以文件都放在同一目录为例： 1.Traceur转码器12345678main.html&lt;script src=\"http://google.github.io/traceur-compiler/bin/traceur.js\"&gt;&lt;/script&gt;&lt;!-- 加载Traceur编译器 --&gt;&lt;script src=\"https://google.github.io/traceur-compiler/bin/BrowserSystem.js\"&gt;&lt;/script&gt;&lt;!-- 加载Traceur编译器 --&gt;&lt;script src=\"http://google.github.io/traceur-compiler/src/bootstrap.js\"&gt;&lt;/script&gt;&lt;!-- 将Traceur编译器用于网页 --&gt;&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt; &lt;!--module类型的引入才会被编码器识别为ES6文件--&gt; main.jsimport &#123; square, diag &#125; from 'profile.js'; //注意文件路径 2.webpack+babel1.编辑webpack.config.js文件12345678910111213141516171819var path = require('path');module.exports = &#123; entry: \"./main.js\", //入口文件 注意文件路径 output: &#123; //输出文件 path: __dirname, filename: \"bundle.js\" //webpack 运行完之后将生成一个 bundle.js 文件 &#125;, module: &#123; loaders: [ //所有加载器(参考:http://webpack.github.io/docs/list-of-loaders.html) &#123; test: path.join(__dirname, 'es6'), loader: 'babel-loader', query: &#123; presets: ['es2015'] &#125; &#125; ] &#125;&#125; 2.安装依赖12cnpm install babel-loader --save-dev //安装 babel-loadernpm install babel-preset-es2015 --save-dev //安装转码规则 3.编辑文件12345test.html&lt;script src=\"bundle.js\"&gt;&lt;/script&gt; //只需要引入bundle.js main.jsimport &#123; square, diag &#125; from './profile'; 4.运行webpack1webpack //可以加一些参数，比如查看进度条、区分颜色、监听 webpack --progress --colors --watch node.Js环境未完待续…","tags":[]},{"title":"ES6 入门整理","date":"2017-02-23T08:52:37.000Z","path":"2017/02/23/ES6-入门整理/","text":"网上接触到的，把实际项目中感觉可以用上的整理出来，方便查看 一些风格1.对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。123456789// badconst a = &#123;&#125;;a.x = 3;// if reshape unavoidableconst a = &#123;&#125;;Object.assign(a, &#123; x: 3 &#125;);// goodconst a = &#123; x: null &#125;;a.x = 3; 2.多用箭头函数12345(() =&gt; &#123; //立即执行函数 console.log('Welcome to the Internet.');&#125;)();[1, 2, 3].map(x =&gt; x * x); 详细区别1.let声明的变量,只在代码块内有效123456789var a = [];for (let i = 0; i &lt; 10; i++) &#123; //i只在循环体内部有效 用var循环外部也可以调用i a[i] = function () &#123; console.log(i); &#125;; let i = 'abc'; //函数内部的变量i和外部的变量i是分离的(循环语句部分是一个父作用域，而循环体内部是一个单独的子作用域) console.log(i); //输出10次abc&#125;a[6](); // 6 当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，如果是var新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值，也就是10 2.let没有变量提升123456789101112131415161718192021222324252627var tmp = new Date();function f() &#123; console.log(tmp); // undefined 内存变量提升，覆盖外部变量 if (false) &#123; var tmp = \"hello world\"; &#125;&#125;function f1() &#123; console.log(n);// 报错ReferenceError let n = 5; if (true) &#123; let n = 10; //只在作用域内有效 &#125; console.log(n); // 5 ,不受10的影响&#125; 有了块作用域之后，立即执行函数就没必要写了// IIFE 写法(function () &#123; var tmp = ...; ...&#125;());// 块级作用域写法&#123; let tmp = ...; ...&#125; 3.暂时性死区123456var tmp = 123;if (true) &#123; tmp = 'abc'; // ReferenceError let所在的区域不受外部影响，无法赋值 let tmp; // 定义之前的块作用域为暂时性死区 console.log(tmp); // undefined&#125; 4.const变量12345678910111213const PI = 3.1415;PI = 3; // TypeError: Assignment to constant variable. const变量不能赋值const foo; // SyntaxError: Missing initializer in const declaration .必须立刻赋值 const foo = &#123;&#125;; //存储了一个地址，地址指向一个对象foo.prop = 123; //对象本身是可变的foo.prop // 输出123foo = &#123;&#125;; // TypeError: \"foo\" is read-only //不能更换地址 const a = [];a.push('Hello'); // 可执行a.length = 0; // 可执行a = ['Dave']; // 报错 常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a就不对 5.变量的解构赋值1234567891011121314151617181920212223242526272829303132let [head, ...tail] = [1, 2, 3, 4]; // head//1 tail//[2, 3, 4]let [x, y, ...z] = ['a']; // x//\"a\" y//undefined z//[] // 报错 转为对象以后不具备Iterator 接口（前五个表达式），本身就不具备Iterator接口（最后一个表达式）。let [foo] = 1;let [foo] = false;let [foo] = NaN;let [foo] = undefined;let [foo] = null;let [foo] = &#123;&#125;; let [x, y = 'b'] = ['a', undefined]; // x='a', y='b' let [x = 1] = [null]; x // null 如果一个数组成员不严格等于undefined，默认值是不会生效的。let [x = f()] = [1]; // x能取到值，所以函数f根本不会执行。 [[1, 2], [3, 4]].map(([a, b]) =&gt; a + b); // [ 3, 7 ][1, undefined, 3].map((x = 'yes') =&gt; x); // [ 1, 'yes', 3 ] undefined会触发函数参数的默认值。 map结构var map = new Map();map.set('first', 'hello');map.set('second', 'world');for (let [key, value] of map) &#123; console.log(key + \" is \" + value);// first is hello second is world&#125;for (let [key] of map) &#123;// 获取键名 // ...&#125;for (let [,value] of map) &#123;// 获取键值 // ...&#125; 6.字符串新增方法12345678910111213var s = 'Hello world!';s.startsWith('world', 6) // true 六之后的字符s.includes('Hello', 6) // false 六之后的字符 s.endsWith('Hello', 5) // true 前五个个字符 'x'.repeat(3) // \"xxx\"'na'.repeat(0) // \"\" 'na'.repeat(-0.9) // \"\" 会先进行取整运算。0到-1之间的小数，取整以后等于-0，repeat视同为0。'na'.repeat('na') // \"\" 参数为字符串会先转换为数字'na'.repeat('3') // \"nanana\"'na'.repeat(NaN) // \"\" NAN undefined null 都会当做0处理 padStart()，padEnd() 字符串补全长度 7.模板字符串1234567891011121314151617181920212223$('#result').append( 'There are &lt;b&gt;' + basket.count + '&lt;/b&gt; ' + 'items in your basket, ' + '&lt;em&gt;' + basket.onSale + '&lt;/em&gt; are on sale!');$('#result').append(` There are &lt;b&gt;$&#123;basket.count&#125;&lt;/b&gt; items in your basket, &lt;em&gt;$&#123;basket.onSale&#125;&lt;/em&gt; are on sale!`); `In JavaScript '\\n' is a line-feed.``In JavaScript this is not legal.` 大括号内部可以放入任意的JavaScript表达式(函数也可)，可以进行运算，以及引用对象属性。var x = 1;var y = 2;`$&#123;x&#125; + $&#123;y * 2&#125; = $&#123;x + y * 2&#125;` \"1 + 4 = 5\"var obj = &#123;x: 1, y: 2&#125;;`$&#123;obj.x + obj.y&#125;` // 3 8.数值的新增方法12345678910// ES5的写法parseInt('12.34') // 12parseFloat('123.45#') // 123.45 // ES6的写法(逐步减少全局性方法，使得语言逐步模块化。)Number.parseInt('12.34') // 12Number.parseFloat('123.45#') // 123.45 Math.trunc方法用于去除一个数的小数部分，返回整数部分。Math.sign方法用来判断一个数到底是正数、负数、还是零。(+1,0,-0,-1) 9.数组的新增方法123456789101112131415Array.from() 将类数组对象和可遍历对象，转为真正的数组let arrayLike = &#123; '0': 'a', '1': 'b', '2': 'c', length: 3&#125;;// ES5的写法var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']// ES6的写法let arr2 = Array.from(arrayLike); // ['a', 'b', 'c'] Array.of() 方法用于将一组值，转换为数组。 Array.of(3, 11, 8) // [3,11,8]Array(3) // [, , ,] 以前的只写一个参数，会以为是数组长度，有解析差异 10.函数的新增方法12345678var x = 1;function foo(x, y = function() &#123; x = 2; &#125;) &#123; //foo函数的作用域为A var x = 3; //作用域为B ，如果去掉var x的作用域和foo一样为A，那么foo()的结果就为2了 y(); console.log(x);&#125;foo() // 3x // 1 11.对象的新增方法123456789101112var birth = '2000/01/01';var Person = &#123; name: '张山', birth, //等同于birth: birth hello() &#123; console.log('我的名字是', this.name); &#125; // 等同于hello: function ()...&#125;; 同值相等算法+0 === -0 //trueNaN === NaN // falseObject.is(+0, -0) // falseObject.is(NaN, NaN) // true 12.set结构12345678910111213141516171819var set = new Set([1, 2, 3, 4, 4]);[...set] // [1, 2, 3, 4] // 去除数组的重复成员 [...new Set(array)] //直接去重function dedupe(array) &#123; return Array.from(new Set(array)); //Array.from方法可以将Set结构转为数组。&#125;dedupe([1, 1, 2, 3]) // [1, 2, 3] add(value)：添加某个值，返回Set结构本身。delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。has(value)：返回一个布尔值，表示该值是否为Set的成员。clear()：清除所有成员，没有返回值。 keys()：返回键名的遍历器values()：返回键值的遍历器entries()：返回键值对的遍历器forEach()：使用回调函数遍历每个成员 13. class类12345678910class Point &#123; constructor()&#123; // ... &#125;&#125;Object.assign(Point.prototype, &#123; toString()&#123;&#125;, toValue()&#123;&#125;&#125;); 主要参考：http://es6.ruanyifeng.com/未完待续~","tags":[]},{"title":"相册分类简单自定义实现","date":"2017-01-22T07:50:20.000Z","path":"2017/01/22/相册分类简单自定义实现/","text":"1.首先提取文件夹(存储img文件)内的文件名 在根目录下创建一个文件夹photos,用来存img文件 创建一个目录photo,会自动生成index.md md文件用来生成相册html1hexo new page 'photo' 当然要在menu里面(主题的_config.yml文件)添加photo标签12345menu: 主页: / 前端: /categories/web 随笔: /categories/essays/ 相册: photo 在photo文件下创建一个tool.js1234567891011121314151617181920212223242526\"use strict\";const fs = require(\"fs\");const path = \"../../photos\";fs.readdir(path, function (err, files) &#123; if (err) &#123; return; &#125; const arr = []; (function iterator(index) &#123; if (index == files.length) &#123; fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\")); return; &#125; fs.stat(path + \"/\" + files[index], function (err, stats) &#123; if (err) &#123; return; &#125; if (stats.isFile()) &#123; arr.push(files[index]); &#125; iterator(index + 1); &#125;) &#125;(0));&#125;); 切换到当前photo目录利用node输出文件名到新建的output.json1node tool.js 2. 引入一个js文件(photo.js)，用来处理图片输出到页面上这里我是将图片上传到七牛云来实现加载，避免影响编译速度我试过将photo.js放在当前目录(photo)下引用,但是缓存问题相当严重,加后标也不好使123456789101112$(function () &#123; $.getJSON(\"/photo/output.json\", function (data) &#123; render(data); &#125;); function render(data) &#123; var imgContent = ''; $.each(data,function (i,value) &#123; //value 是文件名，比如1.png imgContent += '&lt;img src=' + 'http://ok5tknfar.bkt.clouddn.com/' + value +'&gt;'; &#125;); $(\"#imgPage\").append(imgContent); &#125;&#125;); 3. 编辑index.md文件我用的yilla主题,md文件写的会被编辑到一个div的innerHtml里面。主题理论上应该都是这样，通过编译md文件实现生成html文件,只是可能用到的编译框架(grunt/gulp)和具体实现方式(less/scss/逻辑)不同123&lt;div id=\"imgPage\"&gt;&lt;/div&gt;&lt;script src='http://ok5upf0na.bkt.clouddn.com/jquery-3.1.1.min.js'&gt;&lt;/script&gt;&lt;script src='http://ok5upf0na.bkt.clouddn.com/photo.js?version=2017.1.22.1403'&gt;&lt;/script&gt; 这样就实现简单的获取图片，然后将图片输出到页面上。马上要下班然后开年会了，过年如果有时间的话，可能会尝试一下自己写一下图片样式，或者引入插件在hexo上面使用","tags":[]},{"title":"简单的滚轮放大图片","date":"2017-01-20T08:56:56.000Z","path":"2017/01/20/简单的滚轮放大图片/","text":"记录一下，鼠标放在图片上面，以图片的左上角为(0,0)简单的放大图片 绑定函数onmousewheel 函数也可以通过js动态添加1&lt;img src=\"../img/abc.png\" onmousewheel=\"return bigImg(this)\"&gt; 函数体12345678&lt;script type=\"text/javascript\"&gt; function bigImg(o) &#123; var zoom = parseInt(o.style.zoom, 10) || 100; zoom += event.wheelDelta / 12; if (zoom &gt; 0) o.style.zoom = zoom + '%'; return false; &#125;&lt;/script&gt;","tags":[]},{"title":"vue.js响应式问题","date":"2017-01-19T00:49:01.000Z","path":"2017/01/19/Vue.js响应式问题/","text":"首先批评一下自己，都学了快一个月的vue.js，连响应式双向绑定都没完全理解。直到昨天晚上加班 ＝．＝ 一直用的是，通过mounted函数，将实例内的函数暴露给实例外调用，实现数据更新 有２个问题需要注意：(ViewModel) １. 视图，也就是html里面，可以先判断数据是否存在，防止报错1&lt;span v-if=\"subPanel.diseaseData\"&gt;&#123;&#123;subPanel.diseaseData.parent&#125;&#125;&lt;/span&gt; 这一点补充记录一下，是错的，具体情况比较复杂，简单的说不应该在一个实例里面套用另一个实例（3.16）２. 管理数据，也就是JS里面，实现响应式，不仅data里面外接视图的变量需要声明，如果想实现改变变量里面某个属性，导致视图更新， 需要提前具体的声明这个属性。 （错误总结，暂且不删）123$.each(subPanelLIst, function (i, value) &#123; //确保申明变量，才能实现双向绑定 value.diseaseData = []&#125;);","tags":[]},{"title":"微信服务号红包","date":"2017-01-17T00:32:51.000Z","path":"2017/01/17/微信服务号红包/","text":"1.先获取到 AppSecret(应用密钥)登录公众号之后，左侧导航最下面—开发—基本配置。如果没有显示生成，如果有会显示重置 2.通过接口获取到可用tokenhttp://mp.weixin.qq.com/debug （位置：左侧导航—开发—基本配置—在线接口调试工具） 3.根据第二步获得的token取得所有关注用户的openIdhttp://mp.weixin.qq.com/debug （位置：左侧导航—开发—基本配置—在线接口调试工具）next_openid 为空时代表从头开始获取，获取到的用户ID是一个数组，存下来就好 4.登录商户平台进行发送红包操作https://pay.weixin.qq.com/账号是一串数字，在公众号上面可以查看到（需要微信认证过的，不支持个人）如果是第一次登录，需要下载安全控件，下载完后才能输入密码如果商户号上面没钱，需要先充钱（顶部导航交易中心—左侧导航充值） 红包操作（我以现金红包举例） 顶部导航产品中心—现金红包（可以自行选择其他类型） 如果不需要调用接口实现发送红包（手动发红包其实能满足大部分要求了），直接点击前往功能 左侧导航红包模板，根据需求和要求创建模板 创建模板之后，左侧导航红包发送，选择模板 然后点击发送红包，上传txt文件（格式可以在窗口里面点击文件格式说明查看） 如果需要测试发送红包 因为安全问题，前端不能直接跨域请求微信接口。解决如下：参考user/info接口（http://mp.weixin.qq.com/debug 用户管理–获取用户基本信息接口）可以看到获取信息的实际接口是 ：https://api.weixin.qq.com/cgi-bin/user/info?access_token=TOKEN&amp;openid=Id&amp;lang=zh_CN那么，就可以做一个a.txt文档用来存这些链接，每个链接代表一个用户（openId的值是不一样的）我把a.text放到桌面了12cd ~/desktopcat aa.txt |while read i;do echo \"curl -H 'Accept: application/json; indent=4' '$i'\";done|sh &gt;bb.txt echo代码参考 http://www.django-rest-framework.org/tutorial/quickstart/ （搜索curl）这样b.txt就包含了 所有请求接口得到的数据，通过搜索nickname得到openId进行对应测试即可 手动发红包大概就这些了","tags":[]},{"title":"右键菜单","date":"2017-01-12T02:00:58.000Z","path":"2017/01/12/右键菜单/","text":"先阻止默认右键菜单123document.getElementById('elem').oncontextmenu = function () &#123; //只能是原生JS选择器 return false;&#125;; 显示自己的菜单123456789elem.mousedown(function (e) &#123; //可用jquery if (e.which == 3) &#123;//如果点击是右键点击的话 //显示自己的菜单 //之后可能需要根据鼠标位置调整右键菜单位置 var me = e || window.e; var top = parseInt(me.clientY + document.body.scrollTop); var left = parseInt(me.clientX); &#125;&#125;);","tags":[]},{"title":"迎接2017","date":"2017-01-03T02:07:06.000Z","path":"2017/01/03/迎接2017/","text":"先说说去年：&nbsp;&nbsp;&nbsp;&nbsp;工作方面，算是正式以菜鸟的身份进入前端行业。&nbsp;&nbsp;&nbsp;&nbsp;生活方面，最近搬家了，勉强算是改善了环境，至少我想要的单独热水器暖灯卫生间+阳台有了，也不知道什么时候能有自己的房，这个话题就不说了。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;然后，这一年还给自己添置了新电脑+电信100M，美名其曰~程序员需要高配置，实际上是打游戏还是看小电影就自己知道就好（滑稽脸）。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;总体来说，这一年不好也不坏，工资勉强够用，生活平平谈谈。 再聊聊2017：&nbsp;&nbsp;&nbsp;&nbsp;这一年给自己定几个目标，年底看看：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;1.工作上，希望自己能完成蜕变吧，至少年底不要再称呼自己是菜鸟，初学者也行。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;2.希望能挤出时间学车，去做个名副其实的老司机（一直懒得学，今年不要懒）。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;3.DOTA2天梯上8K？不不不，我只是想成为卡尔王（不是卡尔亡）。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;4.本命年希望自己认认真真谈个朋友，顺其自然吧（不要喊我相亲好吗，我还小，我害怕）。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;5.希望今年的自己能变得更加阳光、乐观向上，然后责任意识更强。&nbsp;&nbsp;&nbsp;&nbsp;总体来说，让自己本身变得更好吧，不要太在意环境（以身为种？）。","tags":[]},{"title":"知识点(代码为主)","date":"2016-11-09T03:31:04.000Z","path":"2016/11/09/记录一些知识点/","text":"对自己而言用得少或者容易忘的 1.垂直对齐1234567891011121314151.inner&#123; position: relative; top: 50%; -webkit-transform: translateY(-50%); -o-transform: translateY(-50%); transform: translateY(-50%);&#125;2.parent &#123; position: relative;&#125;.child &#123; position: absolute; top: 50%; transform: translateY(-50%);&#125; 2.高亮选中选中选择框的条件下，选择到label12345input:checked + label &#123; background: yellow;&#125;&lt;input id=\"my-check\" type=\"checkbox\"/&gt;&lt;label for=\"my-check\"&gt;Check box label here&lt;/label&gt; 3.多边框123456789101112131415161718192021222324252627282930#borders &#123; position:relative; z-index:1; padding:30px; border:5px solid #f00; background:#ff9600;&#125;#borders:before &#123; content:\"\"; position:absolute; z-index:-1; top:5px; left:5px; right:5px; bottom:5px; border:5px solid #ffea00; background:#4aa929;&#125;#borders:after &#123; content:\"\"; position:absolute; z-index:-1; top:15px; left:15px; right:15px; bottom:15px; border:5px solid #00b4ff; background:#fff;&#125; 4.not选择器冒号不要忘记了 (:last-child)123ul li:not(:last-child)&#123; color: red;&#125; 5.防止恶意输入123456789101112131415function SaferHTML(templateData) &#123; var s = templateData[0]; for (var i = 1; i &lt; arguments.length; i++) &#123; var arg = String(arguments[i]); // Escape special characters in the substitution. s += arg.replace(/&amp;/g, \"&amp;amp;\") .replace(/&lt;/g, \"&amp;lt;\") .replace(/&gt;/g, \"&amp;gt;\"); // Don't escape special characters in the template. s += templateData[i]; &#125; return s;&#125;","tags":[]},{"title":"太阳公公","date":"2016-11-04T07:47:57.000Z","path":"2016/11/04/太阳公公/","text":"去见你想见的人吧。趁阳光正好。趁微风不噪。趁繁花还未开至荼蘼。趁现在还年轻，还可以走很长很长的路，还能诉说很深很深的思念。","tags":[]},{"title":"hexo+coding+域名","date":"2016-10-28T07:53:16.000Z","path":"2016/10/28/hexo-coding-域名/","text":"由于国内站点访问github太慢，记录一下设置blog到coding hexo命令以及依赖软件/设置就不写了（上一篇已经提到过） 1.修改blog工程文件根目录下的_config.yml文件：&nbsp;&nbsp;&nbsp;&nbsp;修改deploy下的resp路径即可 123456deploy: type: git repository: #github: git@github.com:huyongdi/huyongdi.github.io.git coding: git@git.coding.net:hyd_dev/hyd_dev.git branch: master 2.coding网站的设置登录https://coding.net/ &nbsp;&nbsp;右侧悬浮头像—个人设置—SSH 公钥—添加自己的git公钥左侧导航—代码—pages服务—添加分支master—添加域名绑定即可。","tags":[]},{"title":"配置hexo","date":"2016-10-28T01:04:58.000Z","path":"2016/10/28/简单记录配置hexo/","text":"记录一下搭建一个简单的hexo博客的路程 1.准备条件依赖配置：&nbsp;&nbsp;&nbsp;git ：http://rogerdudler.github.io/git-guide/index.zh.html&nbsp;&nbsp;&nbsp;nodeJs ：https://nodejs.org/en/ 2.安装hexo注: 由于国内访问外网的问题，导致npm命令异常缓慢，可以利用镜像解决缓慢的问题，也就是cnpm&nbsp; &nbsp; &nbsp;这里提供一个自己用到的镜像，一直用着还不错。参考网址：https://npm.taobao.org/ 准备完成之后安装hexo1$ cnpm install -g hexo-cli 进入自己想要安装到的目录，进行建站（建站包括：创建目录+建立依赖文件）123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ cnpm install 3.替换主题这里我用到的主题是yilia如果需要更换，可以参考知乎大神的答案：https://www.zhihu.com/question/24422335 前提：依旧处于步骤2所在的目录1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 这时候你的themes目录下面多了一个yilia文件夹 之后修改根目录下的_config.yml文件：1theme: yilia（冒号后面有一个空格） 4.本地测试123$ cnpm install hexo-server --save$ hexo clean$ hexo s --debug 没有报错的情况下会出现：INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.不要按 Ctrl+C 点击上行的端口 就能看到自己的主题。报错请参考官网:https://hexo.io/zh-cn/docs/index.html （个人感觉将错误信息贴到网上能更快定位问题） 5.连接到github这里就省略github建站的工程了，网上教程很多。如果要更进一步绑定自己的域名 github的根目录下新建CNAME文件，内容直接为域名即可。修改根目录下_config.yml的配置1234deploy: #部署部分的设置 type: git repo: https://github.com/huyongdi/huyongdi.github.io.git branch: master 将hexo提交到服务器g–generated–deploy123$ hexo clean$ hexo g$ hexo d 如果出现错误1ERROR Deployer not found: git 执行命令1cnpm install hexo-deployer-git --save More info:&nbsp;&nbsp;由于目前还没有找到hexo关于网址标签栏左侧图标的配置项(也不知道存不存在)，由于美观,每次提交完之后，自己会在github根目录的index.html添加： 1&lt;link rel=\"shortcut icon\" href=\"http://ofqtnubd0.bkt.clouddn.com/fire.png\" type=\"image/x-icon\"&gt;","tags":[]}]